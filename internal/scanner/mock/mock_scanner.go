// Code generated by MockGen. DO NOT EDIT.
// Source: scanner.go

// Package mock_scanner is a generated GoMock package.
package mock_scanner

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomScanner is a mock of CustomScanner interface.
type MockCustomScanner struct {
	ctrl     *gomock.Controller
	recorder *MockCustomScannerMockRecorder
}

// MockCustomScannerMockRecorder is the mock recorder for MockCustomScanner.
type MockCustomScannerMockRecorder struct {
	mock *MockCustomScanner
}

// NewMockCustomScanner creates a new mock instance.
func NewMockCustomScanner(ctrl *gomock.Controller) *MockCustomScanner {
	mock := &MockCustomScanner{ctrl: ctrl}
	mock.recorder = &MockCustomScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomScanner) EXPECT() *MockCustomScannerMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockCustomScanner) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockCustomScannerMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCustomScanner)(nil).Err))
}

// Scan mocks base method.
func (m *MockCustomScanner) Scan() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockCustomScannerMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockCustomScanner)(nil).Scan))
}

// Text mocks base method.
func (m *MockCustomScanner) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockCustomScannerMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockCustomScanner)(nil).Text))
}
